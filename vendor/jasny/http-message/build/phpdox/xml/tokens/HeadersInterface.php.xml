<?xml version="1.0"?>
<source xmlns="http://xml.phpdox.net/token">
  <file xmlns="http://xml.phpdox.net/src" path="/opt/lampp/htdocs/news/vendor/jasny/http-message/src" file="HeadersInterface.php" realpath="/opt/lampp/htdocs/news/vendor/jasny/http-message/src/HeadersInterface.php" size="5534" time="2017-05-17T03:28:27+02:00" unixtime="1494984507" sha1="b8b723c2e159ff59f95e693d3ccb8a2f1b86bee1" relative="HeadersInterface.php"/>
  <line no="1">
    <token name="T_OPEN_TAG">&lt;?php</token>
  </line>
  <line no="2"/>
  <line no="3">
    <token name="T_NAMESPACE">namespace</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Jasny</token>
    <token name="T_NS_SEPARATOR">\</token>
    <token name="T_STRING">HttpMessage</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="4"/>
  <line no="5">
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="6">
    <token name="T_DOC_COMMENT"> * HTTP messages consist of requests from a client to a server and responses</token>
  </line>
  <line no="7">
    <token name="T_DOC_COMMENT"> * from a server to a client. This interface defines the methods for </token>
  </line>
  <line no="8">
    <token name="T_DOC_COMMENT"> * common headers class to each.</token>
  </line>
  <line no="9">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="10">
    <token name="T_DOC_COMMENT"> * Messages are considered immutable; all methods that might change state MUST</token>
  </line>
  <line no="11">
    <token name="T_DOC_COMMENT"> * be implemented such that they retain the internal state of the current</token>
  </line>
  <line no="12">
    <token name="T_DOC_COMMENT"> * message and return an instance that contains the changed state.</token>
  </line>
  <line no="13">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="14">
    <token name="T_DOC_COMMENT"> * @link http://www.ietf.org/rfc/rfc7230.txt</token>
  </line>
  <line no="15">
    <token name="T_DOC_COMMENT"> * @link http://www.ietf.org/rfc/rfc7231.txt</token>
  </line>
  <line no="16">
    <token name="T_DOC_COMMENT"> */</token>
  </line>
  <line no="17">
    <token name="T_INTERFACE">interface</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">HeadersInterface</token>
  </line>
  <line no="18">
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="19">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="20">
    <token name="T_DOC_COMMENT">     * Retrieves all message header values.</token>
  </line>
  <line no="21">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="22">
    <token name="T_DOC_COMMENT">     * The keys represent the header name as it will be sent over the wire, and</token>
  </line>
  <line no="23">
    <token name="T_DOC_COMMENT">     * each value is an array of strings associated with the header.</token>
  </line>
  <line no="24">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="25">
    <token name="T_DOC_COMMENT">     *     // Represent the headers as a string</token>
  </line>
  <line no="26">
    <token name="T_DOC_COMMENT">     *     foreach ($message-&gt;getHeaders() as $name =&gt; $values) {</token>
  </line>
  <line no="27">
    <token name="T_DOC_COMMENT">     *         echo $name . ": " . implode(", ", $values);</token>
  </line>
  <line no="28">
    <token name="T_DOC_COMMENT">     *     }</token>
  </line>
  <line no="29">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="30">
    <token name="T_DOC_COMMENT">     *     // Emit headers iteratively:</token>
  </line>
  <line no="31">
    <token name="T_DOC_COMMENT">     *     foreach ($message-&gt;getHeaders() as $name =&gt; $values) {</token>
  </line>
  <line no="32">
    <token name="T_DOC_COMMENT">     *         foreach ($values as $value) {</token>
  </line>
  <line no="33">
    <token name="T_DOC_COMMENT">     *             header(sprintf('%s: %s', $name, $value), false);</token>
  </line>
  <line no="34">
    <token name="T_DOC_COMMENT">     *         }</token>
  </line>
  <line no="35">
    <token name="T_DOC_COMMENT">     *     }</token>
  </line>
  <line no="36">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="37">
    <token name="T_DOC_COMMENT">     * While header names are not case-sensitive, getHeaders() will preserve the</token>
  </line>
  <line no="38">
    <token name="T_DOC_COMMENT">     * exact case in which headers were originally specified.</token>
  </line>
  <line no="39">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="40">
    <token name="T_DOC_COMMENT">     * @return string[][] Returns an associative array of the message's headers. Each</token>
  </line>
  <line no="41">
    <token name="T_DOC_COMMENT">     *     key MUST be a header name, and each value MUST be an array of strings</token>
  </line>
  <line no="42">
    <token name="T_DOC_COMMENT">     *     for that header.</token>
  </line>
  <line no="43">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="44">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">getHeaders</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="45">
    <token name="T_WHITESPACE">    </token>
  </line>
  <line no="46">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="47">
    <token name="T_DOC_COMMENT">     * Checks if a header exists by the given case-insensitive name.</token>
  </line>
  <line no="48">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="49">
    <token name="T_DOC_COMMENT">     * @param string $name Case-insensitive header field name.</token>
  </line>
  <line no="50">
    <token name="T_DOC_COMMENT">     * @return bool Returns true if any header names match the given header</token>
  </line>
  <line no="51">
    <token name="T_DOC_COMMENT">     *     name using a case-insensitive string comparison. Returns false if</token>
  </line>
  <line no="52">
    <token name="T_DOC_COMMENT">     *     no matching header name is found in the message.</token>
  </line>
  <line no="53">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="54">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">hasHeader</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$name</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="55">
    <token name="T_WHITESPACE">    </token>
  </line>
  <line no="56">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="57">
    <token name="T_DOC_COMMENT">     * Retrieves a message header value by the given case-insensitive name.</token>
  </line>
  <line no="58">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="59">
    <token name="T_DOC_COMMENT">     * This method returns an array of all the header values of the given</token>
  </line>
  <line no="60">
    <token name="T_DOC_COMMENT">     * case-insensitive header name.</token>
  </line>
  <line no="61">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="62">
    <token name="T_DOC_COMMENT">     * If the header does not appear in the message, this method MUST return an</token>
  </line>
  <line no="63">
    <token name="T_DOC_COMMENT">     * empty array.</token>
  </line>
  <line no="64">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="65">
    <token name="T_DOC_COMMENT">     * @param string $name Case-insensitive header field name.</token>
  </line>
  <line no="66">
    <token name="T_DOC_COMMENT">     * @return string[] An array of string values as provided for the given</token>
  </line>
  <line no="67">
    <token name="T_DOC_COMMENT">     *    header. If the header does not appear in the message, this method MUST</token>
  </line>
  <line no="68">
    <token name="T_DOC_COMMENT">     *    return an empty array.</token>
  </line>
  <line no="69">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="70">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">getHeader</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$name</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="71">
    <token name="T_WHITESPACE">    </token>
  </line>
  <line no="72">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="73">
    <token name="T_DOC_COMMENT">     * Retrieves a comma-separated string of the values for a single header.</token>
  </line>
  <line no="74">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="75">
    <token name="T_DOC_COMMENT">     * This method returns all of the header values of the given</token>
  </line>
  <line no="76">
    <token name="T_DOC_COMMENT">     * case-insensitive header name as a string concatenated together using</token>
  </line>
  <line no="77">
    <token name="T_DOC_COMMENT">     * a comma.</token>
  </line>
  <line no="78">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="79">
    <token name="T_DOC_COMMENT">     * NOTE: Not all header values may be appropriately represented using</token>
  </line>
  <line no="80">
    <token name="T_DOC_COMMENT">     * comma concatenation. For such headers, use getHeader() instead</token>
  </line>
  <line no="81">
    <token name="T_DOC_COMMENT">     * and supply your own delimiter when concatenating.</token>
  </line>
  <line no="82">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="83">
    <token name="T_DOC_COMMENT">     * If the header does not appear in the message, this method MUST return</token>
  </line>
  <line no="84">
    <token name="T_DOC_COMMENT">     * an empty string.</token>
  </line>
  <line no="85">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="86">
    <token name="T_DOC_COMMENT">     * @param string $name Case-insensitive header field name.</token>
  </line>
  <line no="87">
    <token name="T_DOC_COMMENT">     * @return string A string of values as provided for the given header</token>
  </line>
  <line no="88">
    <token name="T_DOC_COMMENT">     *    concatenated together using a comma. If the header does not appear in</token>
  </line>
  <line no="89">
    <token name="T_DOC_COMMENT">     *    the message, this method MUST return an empty string.</token>
  </line>
  <line no="90">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="91">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">getHeaderLine</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$name</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="92">
    <token name="T_WHITESPACE">    </token>
  </line>
  <line no="93">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="94">
    <token name="T_DOC_COMMENT">     * Return an instance with the provided value replacing the specified header.</token>
  </line>
  <line no="95">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="96">
    <token name="T_DOC_COMMENT">     * While header names are case-insensitive, the casing of the header will</token>
  </line>
  <line no="97">
    <token name="T_DOC_COMMENT">     * be preserved by this function, and returned from getHeaders().</token>
  </line>
  <line no="98">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="99">
    <token name="T_DOC_COMMENT">     * This method MUST be implemented in such a way as to retain the</token>
  </line>
  <line no="100">
    <token name="T_DOC_COMMENT">     * immutability of the message, and MUST return an instance that has the</token>
  </line>
  <line no="101">
    <token name="T_DOC_COMMENT">     * new and/or updated header and value.</token>
  </line>
  <line no="102">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="103">
    <token name="T_DOC_COMMENT">     * @param string $name Case-insensitive header field name.</token>
  </line>
  <line no="104">
    <token name="T_DOC_COMMENT">     * @param string|string[] $value Header value(s).</token>
  </line>
  <line no="105">
    <token name="T_DOC_COMMENT">     * @return static</token>
  </line>
  <line no="106">
    <token name="T_DOC_COMMENT">     * @throws \InvalidArgumentException for invalid header names or values.</token>
  </line>
  <line no="107">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="108">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">withHeader</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$name</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$value</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="109">
    <token name="T_WHITESPACE">    </token>
  </line>
  <line no="110">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="111">
    <token name="T_DOC_COMMENT">     * Return an instance with the specified header appended with the given value.</token>
  </line>
  <line no="112">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="113">
    <token name="T_DOC_COMMENT">     * Existing values for the specified header will be maintained. The new</token>
  </line>
  <line no="114">
    <token name="T_DOC_COMMENT">     * value(s) will be appended to the existing list. If the header did not</token>
  </line>
  <line no="115">
    <token name="T_DOC_COMMENT">     * exist previously, it will be added.</token>
  </line>
  <line no="116">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="117">
    <token name="T_DOC_COMMENT">     * This method MUST be implemented in such a way as to retain the</token>
  </line>
  <line no="118">
    <token name="T_DOC_COMMENT">     * immutability of the message, and MUST return an instance that has the</token>
  </line>
  <line no="119">
    <token name="T_DOC_COMMENT">     * new header and/or value.</token>
  </line>
  <line no="120">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="121">
    <token name="T_DOC_COMMENT">     * @param string $name Case-insensitive header field name to add.</token>
  </line>
  <line no="122">
    <token name="T_DOC_COMMENT">     * @param string|string[] $value Header value(s).</token>
  </line>
  <line no="123">
    <token name="T_DOC_COMMENT">     * @return static</token>
  </line>
  <line no="124">
    <token name="T_DOC_COMMENT">     * @throws \InvalidArgumentException for invalid header names or values.</token>
  </line>
  <line no="125">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="126">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">withAddedHeader</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$name</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$value</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="127">
    <token name="T_WHITESPACE">    </token>
  </line>
  <line no="128">
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="129">
    <token name="T_DOC_COMMENT">     * Return an instance without the specified header.</token>
  </line>
  <line no="130">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="131">
    <token name="T_DOC_COMMENT">     * Header resolution MUST be done without case-sensitivity.</token>
  </line>
  <line no="132">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="133">
    <token name="T_DOC_COMMENT">     * This method MUST be implemented in such a way as to retain the</token>
  </line>
  <line no="134">
    <token name="T_DOC_COMMENT">     * immutability of the message, and MUST return an instance that removes</token>
  </line>
  <line no="135">
    <token name="T_DOC_COMMENT">     * the named header.</token>
  </line>
  <line no="136">
    <token name="T_DOC_COMMENT">     *</token>
  </line>
  <line no="137">
    <token name="T_DOC_COMMENT">     * @param string $name Case-insensitive header field name to remove.</token>
  </line>
  <line no="138">
    <token name="T_DOC_COMMENT">     * @return static</token>
  </line>
  <line no="139">
    <token name="T_DOC_COMMENT">     */</token>
  </line>
  <line no="140">
    <token name="T_WHITESPACE">    </token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">withoutHeader</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$name</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="141">
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="142"/>
</source>
