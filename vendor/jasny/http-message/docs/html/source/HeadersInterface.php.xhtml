<?xml version="1.0"?>
<html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><title>phpDox - Source of HeadersInterface.php</title><link rel="stylesheet" type="text/css" href="../css/style.css" media="screen"/><link rel="stylesheet" href="../css/source.css"/><meta http-equiv="content-type" content="text/html; charset=utf-8"/></head><body><nav class="topnav"><ul><li><div class="logo"><span>/**</span>phpDox</div></li><li class="separator"><a href="../index.xhtml">Overview</a></li><li class="separator"><a href="../namespaces.xhtml">Namespaces</a></li><li><a href="../interfaces.xhtml">Interfaces</a></li><li><a href="../classes.xhtml">Classes</a></li><li><a href="../traits.xhtml">Traits</a></li><li class="separator"><a href="../source/index.xhtml">Source</a></li></ul></nav><div id="mainstage"><div class="box"><ul class="breadcrumb"><li><a href="../index.xhtml">Overview</a></li><li class="separator"><a href="../source/index.xhtml">Source</a></li></ul></div><h1>Source of file HeadersInterface.php</h1><p>
                        Size: 5,534 Bytes - Last Modified: 2017-05-17T03:28:27+02:00</p><section><h2><small>/opt/lampp/htdocs/news/vendor/jasny/http-message/src/</small>HeadersInterface.php</h2><table class="source"><tr><td class="no"><a class="anker" href="#line1">1</a><a class="anker" href="#line2">2</a><a class="anker" href="#line3">3</a><a class="anker" href="#line4">4</a><a class="anker" href="#line5">5</a><a class="anker" href="#line6">6</a><a class="anker" href="#line7">7</a><a class="anker" href="#line8">8</a><a class="anker" href="#line9">9</a><a class="anker" href="#line10">10</a><a class="anker" href="#line11">11</a><a class="anker" href="#line12">12</a><a class="anker" href="#line13">13</a><a class="anker" href="#line14">14</a><a class="anker" href="#line15">15</a><a class="anker" href="#line16">16</a><a class="anker" href="#line17">17</a><a class="anker" href="#line18">18</a><a class="anker" href="#line19">19</a><a class="anker" href="#line20">20</a><a class="anker" href="#line21">21</a><a class="anker" href="#line22">22</a><a class="anker" href="#line23">23</a><a class="anker" href="#line24">24</a><a class="anker" href="#line25">25</a><a class="anker" href="#line26">26</a><a class="anker" href="#line27">27</a><a class="anker" href="#line28">28</a><a class="anker" href="#line29">29</a><a class="anker" href="#line30">30</a><a class="anker" href="#line31">31</a><a class="anker" href="#line32">32</a><a class="anker" href="#line33">33</a><a class="anker" href="#line34">34</a><a class="anker" href="#line35">35</a><a class="anker" href="#line36">36</a><a class="anker" href="#line37">37</a><a class="anker" href="#line38">38</a><a class="anker" href="#line39">39</a><a class="anker" href="#line40">40</a><a class="anker" href="#line41">41</a><a class="anker" href="#line42">42</a><a class="anker" href="#line43">43</a><a class="anker" href="#line44">44</a><a class="anker" href="#line45">45</a><a class="anker" href="#line46">46</a><a class="anker" href="#line47">47</a><a class="anker" href="#line48">48</a><a class="anker" href="#line49">49</a><a class="anker" href="#line50">50</a><a class="anker" href="#line51">51</a><a class="anker" href="#line52">52</a><a class="anker" href="#line53">53</a><a class="anker" href="#line54">54</a><a class="anker" href="#line55">55</a><a class="anker" href="#line56">56</a><a class="anker" href="#line57">57</a><a class="anker" href="#line58">58</a><a class="anker" href="#line59">59</a><a class="anker" href="#line60">60</a><a class="anker" href="#line61">61</a><a class="anker" href="#line62">62</a><a class="anker" href="#line63">63</a><a class="anker" href="#line64">64</a><a class="anker" href="#line65">65</a><a class="anker" href="#line66">66</a><a class="anker" href="#line67">67</a><a class="anker" href="#line68">68</a><a class="anker" href="#line69">69</a><a class="anker" href="#line70">70</a><a class="anker" href="#line71">71</a><a class="anker" href="#line72">72</a><a class="anker" href="#line73">73</a><a class="anker" href="#line74">74</a><a class="anker" href="#line75">75</a><a class="anker" href="#line76">76</a><a class="anker" href="#line77">77</a><a class="anker" href="#line78">78</a><a class="anker" href="#line79">79</a><a class="anker" href="#line80">80</a><a class="anker" href="#line81">81</a><a class="anker" href="#line82">82</a><a class="anker" href="#line83">83</a><a class="anker" href="#line84">84</a><a class="anker" href="#line85">85</a><a class="anker" href="#line86">86</a><a class="anker" href="#line87">87</a><a class="anker" href="#line88">88</a><a class="anker" href="#line89">89</a><a class="anker" href="#line90">90</a><a class="anker" href="#line91">91</a><a class="anker" href="#line92">92</a><a class="anker" href="#line93">93</a><a class="anker" href="#line94">94</a><a class="anker" href="#line95">95</a><a class="anker" href="#line96">96</a><a class="anker" href="#line97">97</a><a class="anker" href="#line98">98</a><a class="anker" href="#line99">99</a><a class="anker" href="#line100">100</a><a class="anker" href="#line101">101</a><a class="anker" href="#line102">102</a><a class="anker" href="#line103">103</a><a class="anker" href="#line104">104</a><a class="anker" href="#line105">105</a><a class="anker" href="#line106">106</a><a class="anker" href="#line107">107</a><a class="anker" href="#line108">108</a><a class="anker" href="#line109">109</a><a class="anker" href="#line110">110</a><a class="anker" href="#line111">111</a><a class="anker" href="#line112">112</a><a class="anker" href="#line113">113</a><a class="anker" href="#line114">114</a><a class="anker" href="#line115">115</a><a class="anker" href="#line116">116</a><a class="anker" href="#line117">117</a><a class="anker" href="#line118">118</a><a class="anker" href="#line119">119</a><a class="anker" href="#line120">120</a><a class="anker" href="#line121">121</a><a class="anker" href="#line122">122</a><a class="anker" href="#line123">123</a><a class="anker" href="#line124">124</a><a class="anker" href="#line125">125</a><a class="anker" href="#line126">126</a><a class="anker" href="#line127">127</a><a class="anker" href="#line128">128</a><a class="anker" href="#line129">129</a><a class="anker" href="#line130">130</a><a class="anker" href="#line131">131</a><a class="anker" href="#line132">132</a><a class="anker" href="#line133">133</a><a class="anker" href="#line134">134</a><a class="anker" href="#line135">135</a><a class="anker" href="#line136">136</a><a class="anker" href="#line137">137</a><a class="anker" href="#line138">138</a><a class="anker" href="#line139">139</a><a class="anker" href="#line140">140</a><a class="anker" href="#line141">141</a><a class="anker" href="#line142">142</a></td><td class="line"><div id="line1"><pre><span class="token T_OPEN_TAG">&lt;?php</span></pre></div><div id="line2"><br/></div><div id="line3"><pre><span class="token T_NAMESPACE">namespace</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">Jasny</span><span class="token T_NS_SEPARATOR">\</span><span class="token T_STRING">HttpMessage</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line4"><br/></div><div id="line5"><pre><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line6"><pre><span class="token T_DOC_COMMENT"> * HTTP messages consist of requests from a client to a server and responses</span></pre></div><div id="line7"><pre><span class="token T_DOC_COMMENT"> * from a server to a client. This interface defines the methods for </span></pre></div><div id="line8"><pre><span class="token T_DOC_COMMENT"> * common headers class to each.</span></pre></div><div id="line9"><pre><span class="token T_DOC_COMMENT"> *</span></pre></div><div id="line10"><pre><span class="token T_DOC_COMMENT"> * Messages are considered immutable; all methods that might change state MUST</span></pre></div><div id="line11"><pre><span class="token T_DOC_COMMENT"> * be implemented such that they retain the internal state of the current</span></pre></div><div id="line12"><pre><span class="token T_DOC_COMMENT"> * message and return an instance that contains the changed state.</span></pre></div><div id="line13"><pre><span class="token T_DOC_COMMENT"> *</span></pre></div><div id="line14"><pre><span class="token T_DOC_COMMENT"> * @link http://www.ietf.org/rfc/rfc7230.txt</span></pre></div><div id="line15"><pre><span class="token T_DOC_COMMENT"> * @link http://www.ietf.org/rfc/rfc7231.txt</span></pre></div><div id="line16"><pre><span class="token T_DOC_COMMENT"> */</span></pre></div><div id="line17"><pre><span class="token T_INTERFACE">interface</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">HeadersInterface</span></pre></div><div id="line18"><pre><span class="token T_PHPDOX_OPEN_CURLY">{</span></pre></div><div id="line19"><pre><span class="token T_WHITESPACE">    </span><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line20"><pre><span class="token T_DOC_COMMENT">     * Retrieves all message header values.</span></pre></div><div id="line21"><pre><span class="token T_DOC_COMMENT">     *</span></pre></div><div id="line22"><pre><span class="token T_DOC_COMMENT">     * The keys represent the header name as it will be sent over the wire, and</span></pre></div><div id="line23"><pre><span class="token T_DOC_COMMENT">     * each value is an array of strings associated with the header.</span></pre></div><div id="line24"><pre><span class="token T_DOC_COMMENT">     *</span></pre></div><div id="line25"><pre><span class="token T_DOC_COMMENT">     *     // Represent the headers as a string</span></pre></div><div id="line26"><pre><span class="token T_DOC_COMMENT">     *     foreach ($message-&gt;getHeaders() as $name =&gt; $values) {</span></pre></div><div id="line27"><pre><span class="token T_DOC_COMMENT">     *         echo $name . ": " . implode(", ", $values);</span></pre></div><div id="line28"><pre><span class="token T_DOC_COMMENT">     *     }</span></pre></div><div id="line29"><pre><span class="token T_DOC_COMMENT">     *</span></pre></div><div id="line30"><pre><span class="token T_DOC_COMMENT">     *     // Emit headers iteratively:</span></pre></div><div id="line31"><pre><span class="token T_DOC_COMMENT">     *     foreach ($message-&gt;getHeaders() as $name =&gt; $values) {</span></pre></div><div id="line32"><pre><span class="token T_DOC_COMMENT">     *         foreach ($values as $value) {</span></pre></div><div id="line33"><pre><span class="token T_DOC_COMMENT">     *             header(sprintf('%s: %s', $name, $value), false);</span></pre></div><div id="line34"><pre><span class="token T_DOC_COMMENT">     *         }</span></pre></div><div id="line35"><pre><span class="token T_DOC_COMMENT">     *     }</span></pre></div><div id="line36"><pre><span class="token T_DOC_COMMENT">     *</span></pre></div><div id="line37"><pre><span class="token T_DOC_COMMENT">     * While header names are not case-sensitive, getHeaders() will preserve the</span></pre></div><div id="line38"><pre><span class="token T_DOC_COMMENT">     * exact case in which headers were originally specified.</span></pre></div><div id="line39"><pre><span class="token T_DOC_COMMENT">     *</span></pre></div><div id="line40"><pre><span class="token T_DOC_COMMENT">     * @return string[][] Returns an associative array of the message's headers. Each</span></pre></div><div id="line41"><pre><span class="token T_DOC_COMMENT">     *     key MUST be a header name, and each value MUST be an array of strings</span></pre></div><div id="line42"><pre><span class="token T_DOC_COMMENT">     *     for that header.</span></pre></div><div id="line43"><pre><span class="token T_DOC_COMMENT">     */</span></pre></div><div id="line44"><pre><span class="token T_WHITESPACE">    </span><span class="token T_PUBLIC">public</span><span class="token T_WHITESPACE"> </span><span class="token T_FUNCTION">function</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">getHeaders</span><span class="token T_PHPDOX_OPEN_BRACKET">(</span><span class="token T_PHPDOX_CLOSE_BRACKET">)</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line45"><pre><span class="token T_WHITESPACE">    </span></pre></div><div id="line46"><pre><span class="token T_WHITESPACE">    </span><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line47"><pre><span class="token T_DOC_COMMENT">     * Checks if a header exists by the given case-insensitive name.</span></pre></div><div id="line48"><pre><span class="token T_DOC_COMMENT">     *</span></pre></div><div id="line49"><pre><span class="token T_DOC_COMMENT">     * @param string $name Case-insensitive header field name.</span></pre></div><div id="line50"><pre><span class="token T_DOC_COMMENT">     * @return bool Returns true if any header names match the given header</span></pre></div><div id="line51"><pre><span class="token T_DOC_COMMENT">     *     name using a case-insensitive string comparison. Returns false if</span></pre></div><div id="line52"><pre><span class="token T_DOC_COMMENT">     *     no matching header name is found in the message.</span></pre></div><div id="line53"><pre><span class="token T_DOC_COMMENT">     */</span></pre></div><div id="line54"><pre><span class="token T_WHITESPACE">    </span><span class="token T_PUBLIC">public</span><span class="token T_WHITESPACE"> </span><span class="token T_FUNCTION">function</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">hasHeader</span><span class="token T_PHPDOX_OPEN_BRACKET">(</span><span class="token T_VARIABLE">$name</span><span class="token T_PHPDOX_CLOSE_BRACKET">)</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line55"><pre><span class="token T_WHITESPACE">    </span></pre></div><div id="line56"><pre><span class="token T_WHITESPACE">    </span><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line57"><pre><span class="token T_DOC_COMMENT">     * Retrieves a message header value by the given case-insensitive name.</span></pre></div><div id="line58"><pre><span class="token T_DOC_COMMENT">     *</span></pre></div><div id="line59"><pre><span class="token T_DOC_COMMENT">     * This method returns an array of all the header values of the given</span></pre></div><div id="line60"><pre><span class="token T_DOC_COMMENT">     * case-insensitive header name.</span></pre></div><div id="line61"><pre><span class="token T_DOC_COMMENT">     *</span></pre></div><div id="line62"><pre><span class="token T_DOC_COMMENT">     * If the header does not appear in the message, this method MUST return an</span></pre></div><div id="line63"><pre><span class="token T_DOC_COMMENT">     * empty array.</span></pre></div><div id="line64"><pre><span class="token T_DOC_COMMENT">     *</span></pre></div><div id="line65"><pre><span class="token T_DOC_COMMENT">     * @param string $name Case-insensitive header field name.</span></pre></div><div id="line66"><pre><span class="token T_DOC_COMMENT">     * @return string[] An array of string values as provided for the given</span></pre></div><div id="line67"><pre><span class="token T_DOC_COMMENT">     *    header. If the header does not appear in the message, this method MUST</span></pre></div><div id="line68"><pre><span class="token T_DOC_COMMENT">     *    return an empty array.</span></pre></div><div id="line69"><pre><span class="token T_DOC_COMMENT">     */</span></pre></div><div id="line70"><pre><span class="token T_WHITESPACE">    </span><span class="token T_PUBLIC">public</span><span class="token T_WHITESPACE"> </span><span class="token T_FUNCTION">function</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">getHeader</span><span class="token T_PHPDOX_OPEN_BRACKET">(</span><span class="token T_VARIABLE">$name</span><span class="token T_PHPDOX_CLOSE_BRACKET">)</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line71"><pre><span class="token T_WHITESPACE">    </span></pre></div><div id="line72"><pre><span class="token T_WHITESPACE">    </span><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line73"><pre><span class="token T_DOC_COMMENT">     * Retrieves a comma-separated string of the values for a single header.</span></pre></div><div id="line74"><pre><span class="token T_DOC_COMMENT">     *</span></pre></div><div id="line75"><pre><span class="token T_DOC_COMMENT">     * This method returns all of the header values of the given</span></pre></div><div id="line76"><pre><span class="token T_DOC_COMMENT">     * case-insensitive header name as a string concatenated together using</span></pre></div><div id="line77"><pre><span class="token T_DOC_COMMENT">     * a comma.</span></pre></div><div id="line78"><pre><span class="token T_DOC_COMMENT">     *</span></pre></div><div id="line79"><pre><span class="token T_DOC_COMMENT">     * NOTE: Not all header values may be appropriately represented using</span></pre></div><div id="line80"><pre><span class="token T_DOC_COMMENT">     * comma concatenation. For such headers, use getHeader() instead</span></pre></div><div id="line81"><pre><span class="token T_DOC_COMMENT">     * and supply your own delimiter when concatenating.</span></pre></div><div id="line82"><pre><span class="token T_DOC_COMMENT">     *</span></pre></div><div id="line83"><pre><span class="token T_DOC_COMMENT">     * If the header does not appear in the message, this method MUST return</span></pre></div><div id="line84"><pre><span class="token T_DOC_COMMENT">     * an empty string.</span></pre></div><div id="line85"><pre><span class="token T_DOC_COMMENT">     *</span></pre></div><div id="line86"><pre><span class="token T_DOC_COMMENT">     * @param string $name Case-insensitive header field name.</span></pre></div><div id="line87"><pre><span class="token T_DOC_COMMENT">     * @return string A string of values as provided for the given header</span></pre></div><div id="line88"><pre><span class="token T_DOC_COMMENT">     *    concatenated together using a comma. If the header does not appear in</span></pre></div><div id="line89"><pre><span class="token T_DOC_COMMENT">     *    the message, this method MUST return an empty string.</span></pre></div><div id="line90"><pre><span class="token T_DOC_COMMENT">     */</span></pre></div><div id="line91"><pre><span class="token T_WHITESPACE">    </span><span class="token T_PUBLIC">public</span><span class="token T_WHITESPACE"> </span><span class="token T_FUNCTION">function</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">getHeaderLine</span><span class="token T_PHPDOX_OPEN_BRACKET">(</span><span class="token T_VARIABLE">$name</span><span class="token T_PHPDOX_CLOSE_BRACKET">)</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line92"><pre><span class="token T_WHITESPACE">    </span></pre></div><div id="line93"><pre><span class="token T_WHITESPACE">    </span><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line94"><pre><span class="token T_DOC_COMMENT">     * Return an instance with the provided value replacing the specified header.</span></pre></div><div id="line95"><pre><span class="token T_DOC_COMMENT">     *</span></pre></div><div id="line96"><pre><span class="token T_DOC_COMMENT">     * While header names are case-insensitive, the casing of the header will</span></pre></div><div id="line97"><pre><span class="token T_DOC_COMMENT">     * be preserved by this function, and returned from getHeaders().</span></pre></div><div id="line98"><pre><span class="token T_DOC_COMMENT">     *</span></pre></div><div id="line99"><pre><span class="token T_DOC_COMMENT">     * This method MUST be implemented in such a way as to retain the</span></pre></div><div id="line100"><pre><span class="token T_DOC_COMMENT">     * immutability of the message, and MUST return an instance that has the</span></pre></div><div id="line101"><pre><span class="token T_DOC_COMMENT">     * new and/or updated header and value.</span></pre></div><div id="line102"><pre><span class="token T_DOC_COMMENT">     *</span></pre></div><div id="line103"><pre><span class="token T_DOC_COMMENT">     * @param string $name Case-insensitive header field name.</span></pre></div><div id="line104"><pre><span class="token T_DOC_COMMENT">     * @param string|string[] $value Header value(s).</span></pre></div><div id="line105"><pre><span class="token T_DOC_COMMENT">     * @return static</span></pre></div><div id="line106"><pre><span class="token T_DOC_COMMENT">     * @throws \InvalidArgumentException for invalid header names or values.</span></pre></div><div id="line107"><pre><span class="token T_DOC_COMMENT">     */</span></pre></div><div id="line108"><pre><span class="token T_WHITESPACE">    </span><span class="token T_PUBLIC">public</span><span class="token T_WHITESPACE"> </span><span class="token T_FUNCTION">function</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">withHeader</span><span class="token T_PHPDOX_OPEN_BRACKET">(</span><span class="token T_VARIABLE">$name</span><span class="token T_PHPDOX_COMMA">,</span><span class="token T_WHITESPACE"> </span><span class="token T_VARIABLE">$value</span><span class="token T_PHPDOX_CLOSE_BRACKET">)</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line109"><pre><span class="token T_WHITESPACE">    </span></pre></div><div id="line110"><pre><span class="token T_WHITESPACE">    </span><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line111"><pre><span class="token T_DOC_COMMENT">     * Return an instance with the specified header appended with the given value.</span></pre></div><div id="line112"><pre><span class="token T_DOC_COMMENT">     *</span></pre></div><div id="line113"><pre><span class="token T_DOC_COMMENT">     * Existing values for the specified header will be maintained. The new</span></pre></div><div id="line114"><pre><span class="token T_DOC_COMMENT">     * value(s) will be appended to the existing list. If the header did not</span></pre></div><div id="line115"><pre><span class="token T_DOC_COMMENT">     * exist previously, it will be added.</span></pre></div><div id="line116"><pre><span class="token T_DOC_COMMENT">     *</span></pre></div><div id="line117"><pre><span class="token T_DOC_COMMENT">     * This method MUST be implemented in such a way as to retain the</span></pre></div><div id="line118"><pre><span class="token T_DOC_COMMENT">     * immutability of the message, and MUST return an instance that has the</span></pre></div><div id="line119"><pre><span class="token T_DOC_COMMENT">     * new header and/or value.</span></pre></div><div id="line120"><pre><span class="token T_DOC_COMMENT">     *</span></pre></div><div id="line121"><pre><span class="token T_DOC_COMMENT">     * @param string $name Case-insensitive header field name to add.</span></pre></div><div id="line122"><pre><span class="token T_DOC_COMMENT">     * @param string|string[] $value Header value(s).</span></pre></div><div id="line123"><pre><span class="token T_DOC_COMMENT">     * @return static</span></pre></div><div id="line124"><pre><span class="token T_DOC_COMMENT">     * @throws \InvalidArgumentException for invalid header names or values.</span></pre></div><div id="line125"><pre><span class="token T_DOC_COMMENT">     */</span></pre></div><div id="line126"><pre><span class="token T_WHITESPACE">    </span><span class="token T_PUBLIC">public</span><span class="token T_WHITESPACE"> </span><span class="token T_FUNCTION">function</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">withAddedHeader</span><span class="token T_PHPDOX_OPEN_BRACKET">(</span><span class="token T_VARIABLE">$name</span><span class="token T_PHPDOX_COMMA">,</span><span class="token T_WHITESPACE"> </span><span class="token T_VARIABLE">$value</span><span class="token T_PHPDOX_CLOSE_BRACKET">)</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line127"><pre><span class="token T_WHITESPACE">    </span></pre></div><div id="line128"><pre><span class="token T_WHITESPACE">    </span><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line129"><pre><span class="token T_DOC_COMMENT">     * Return an instance without the specified header.</span></pre></div><div id="line130"><pre><span class="token T_DOC_COMMENT">     *</span></pre></div><div id="line131"><pre><span class="token T_DOC_COMMENT">     * Header resolution MUST be done without case-sensitivity.</span></pre></div><div id="line132"><pre><span class="token T_DOC_COMMENT">     *</span></pre></div><div id="line133"><pre><span class="token T_DOC_COMMENT">     * This method MUST be implemented in such a way as to retain the</span></pre></div><div id="line134"><pre><span class="token T_DOC_COMMENT">     * immutability of the message, and MUST return an instance that removes</span></pre></div><div id="line135"><pre><span class="token T_DOC_COMMENT">     * the named header.</span></pre></div><div id="line136"><pre><span class="token T_DOC_COMMENT">     *</span></pre></div><div id="line137"><pre><span class="token T_DOC_COMMENT">     * @param string $name Case-insensitive header field name to remove.</span></pre></div><div id="line138"><pre><span class="token T_DOC_COMMENT">     * @return static</span></pre></div><div id="line139"><pre><span class="token T_DOC_COMMENT">     */</span></pre></div><div id="line140"><pre><span class="token T_WHITESPACE">    </span><span class="token T_PUBLIC">public</span><span class="token T_WHITESPACE"> </span><span class="token T_FUNCTION">function</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">withoutHeader</span><span class="token T_PHPDOX_OPEN_BRACKET">(</span><span class="token T_VARIABLE">$name</span><span class="token T_PHPDOX_CLOSE_BRACKET">)</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line141"><pre><span class="token T_PHPDOX_CLOSE_CURLY">}</span></pre></div><div id="line142"><br/></div></td></tr></table></section></div><footer><span>Generated using phpDox 0.11.2 - Copyright (C) 2010 - 2018 by Arne Blankerts and Contributors</span></footer></body></html>
